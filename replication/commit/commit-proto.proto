syntax = "proto3";

package replication.commit.proto;

enum CommitResult{
    COMMIT = 0;
    ABORT = 1;
    PRECOMMIT = 2;
    PREPARED = 3;
}

// Replica to co-located coordinator, process 3 in Fig.4 in the paper.
message ReplicateReplyAndVote {
    uint64 tid = 1;
    uint64 shard = 2;
    uint64 replica = 3;
    CommitResult vote = 4;
    repeated uint64 participants = 5;
    uint64 primaryShard = 6;
    uint64 primaryCoordinator = 7;
    uint64 timestamp = 8;
}

// Co-located coordinator to correspondent coordinator, process 5 in Fig.4 in the paper.
message BypassLeaderReply {
    uint64 tid = 1;
    uint64 shard = 2;
    uint64 replica = 3;
}

message BypassLeaderReplyUnion {
    uint64 tid = 1;
    repeated uint64 shards = 2;
    uint64 replica = 3;
}

// coordinator -> co-located shards' leader
message NotifyDecision {
    uint64 tid = 2;
    CommitResult state = 1;
    uint64 timestamp = 3;
}

// correspondent coordinator -> other coordinators
message ReplicateDecision {
    uint64 tid = 1;
    CommitResult state = 2;
    uint64 timestamp = 3;
}

// other coordinators -> correspondent coordinator
message ReplyDecision {
    uint64 tid = 1;
    uint64 coordinatorid = 2;
    uint64 timestamp = 3;
}

// participant leader -> coordinator replicas
// Unused
message Vote {
    uint64 tid = 7;
    CommitResult vote = 1;
    uint64 shard = 2;
    repeated uint64 participants = 3;
    uint64 primaryShard = 4;
    uint64 primaryCoordinator = 5;
    uint64 replica = 6;
    uint64 timestamp = 8;
}

// participant followers -> correspondent coordinator
// Unused
message ReplicateResult {
    uint64 tid = 3;
    uint64 shard = 1;
    uint64 replica = 2;
    // repeated uint64 participants = 3;
    // uint64 primaryShard = 4;
}

// coordinator replica -> correspondent coordinator
// Unused
message NotifyDecisionToPrimary {
    uint64 tid = 2;
    CommitResult state = 1;
    repeated uint64 participants = 3;
    uint64 primaryShard = 4;
    uint64 timestamp = 5;
}

// correspondent coordinator -> primary shard leader
// Unused
message NotifyReplicateResult {
    uint64 tid = 2;
    bool replicateSuccess = 1;
    uint64 timestamp = 3;
}

// primary shard leader -> correspondent coordinator
message RequestCommitResult {
    uint64 tid = 2;
    repeated uint64 participants = 1;
    uint64 primaryShard = 3;
    uint64 shard = 4;
}